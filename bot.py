import asyncio
import logging
import json
import os
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, F, Router
from aiogram.enums import ParseMode
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, BotCommand, Update
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.client.default import DefaultBotProperties
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from config import BOT_TOKEN, WEBHOOK_URL
from database import supabase, get_user_by_telegram_id, insert_user, save_onboarding_data, get_full_user_profile, save_generated_plan
from llm import generate_structured_plan_with_llm
import uvicorn

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# FSM States
class OnboardingState(StatesGroup):
    waiting_for_name = State()
    waiting_for_age = State()
    waiting_for_height = State()
    waiting_for_weight = State()
    waiting_for_goal = State()
    waiting_for_motivation = State()
    waiting_for_demotivation = State()
    waiting_for_experience = State()
    waiting_for_personal_bests = State()
    waiting_for_days_per_week = State()
    waiting_for_preferred_days = State()
    waiting_for_trainings_per_day = State()
    waiting_for_long_run_day = State()
    waiting_for_current_injuries = State()
    waiting_for_recurring_injuries = State()
    waiting_for_equipment = State()
    waiting_for_infrastructure = State()
    waiting_for_dietary_restrictions = State()
    waiting_for_weekly_volume = State()
    waiting_for_additional_info = State()

class EditingState(StatesGroup):
    waiting_for_changes = State()

# Router
router = Router()

# Keyboards
def get_back_keyboard(previous_state: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_to:{previous_state}")]
    ])

def get_plan_feedback_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –í—Å–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç", callback_data="plan_confirm")],
        [InlineKeyboardButton(text="‚úçÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="plan_edit")]
    ])

# Prompts and Formatting
def format_prompt_for_detailed_json(profile_data: dict, week_num: int = 1) -> str:
    profile = profile_data.get('profile', {})
    preferences = profile_data.get('preferences', {})
    phases = {1: "–≤—Ç—è–≥–∏–≤–∞—é—â–∞—è", 2: "—É–¥–∞—Ä–Ω–∞—è", 3: "—É–¥–∞—Ä–Ω–∞—è", 4: "–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ–ª—å–Ω–∞—è"}
    phase = phases.get(week_num, "–≤—Ç—è–≥–∏–≤–∞—é—â–∞—è")
    macrocycle_info = f"–≠—Ç–æ {week_num}-—è –Ω–µ–¥–µ–ª—è 4-–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –º–∞–∫—Ä–æ—Ü–∏–∫–ª–∞. –§–∞–∑–∞: {phase}."

    prompt = f"""
–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä –ø–æ –±–µ–≥—É –∏ –ø–∏—Ç–∞–Ω–∏—é. –°–æ–∑–¥–∞–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ 7 –¥–Ω–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –°–¢–†–û–ì–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.

**–°—Ç—Ä—É–∫—Ç—É—Ä–∞ JSON:**
{{
  "intro_summary": "–ö—Ä–∞—Ç–∫–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∏–º–µ–Ω–µ–º –∏ –∞–Ω–∞–ª–∏–∑ —Ü–µ–ª–µ–π (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).",
  "training_plan": [
    {{"day_of_week": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "date": "01.07", "morning_workout": {{"type": "–õ–µ–≥–∫–∏–π –±–µ–≥", "details": "5 –∫–º @ 6:00/–∫–º", "nutrition_notes": "–ë–∞–Ω–∞–Ω –∑–∞ 30 –º–∏–Ω –¥–æ"}}}},
    {{"day_of_week": "–í—Ç–æ—Ä–Ω–∏–∫", "date": "02.07", "morning_workout": {{"type": "–û—Ç–¥—ã—Ö", "details": "-", "nutrition_notes": "-"}}}}
  ],
  "workout_details": [
    {{"block_name": "–°–∏–ª–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", "target_muscle_group": "–ù–æ–≥–∏", "reps_and_sets": "3x12", "exercises": [{{"name": "–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è", "details": "12 —Ä–∞–∑"}}]}}
  ],
  "meal_plan": [
    {{"day_of_week": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "total_calories": 2000, "meals": [{{"meal_type": "–ó–∞–≤—Ç—Ä–∞–∫", "description": "–û–≤—Å—è–Ω–∫–∞ 80 –≥"}}]}}
  ],
  "shopping_list": [{{"category": "–ó–µ—Ä–Ω–æ–≤—ã–µ", "items": ["–û–≤—Å—è–Ω–∫–∞: 500 –≥"]}}],
  "general_recommendations": "–°–æ–Ω 7-8 —á–∞—Å–æ–≤, –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏—è 2 –ª –≤–æ–¥—ã."
}}

**–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:**
- –£—á–∏—Ç—ã–≤–∞–π {preferences.get('training_days_per_week', 3)} –¥–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –Ω–µ–¥–µ–ª—é, –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: {preferences.get('preferred_days', '–ø–Ω, —Å—Ä, –ø—Ç')}.
- –î–ª–∏—Ç–µ–ª—å–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤ {preferences.get('long_run_day', '–≤—Å')}.
- {preferences.get('trainings_per_day', 1)} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –¥–µ–Ω—å.
- –¢—Ä–∞–≤–º—ã: {profile.get('current_injuries', '–ù–µ—Ç')} –∏ {profile.get('recurring_injuries', '–ù–µ—Ç')}.
- –ü–∏—Ç–∞–Ω–∏–µ: 3 –ø—Ä–∏–µ–º–∞ + 1-2 –ø–µ—Ä–µ–∫—É—Å–∞, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {profile.get('dietary_restrictions', '–ù–µ—Ç')}.
- –ò—Å–ø–æ–ª—å–∑—É–π –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: {profile.get('equipment', '–ù–µ—Ç')}.
- –¢–µ–º–ø –∏ –ø—É–ª—å—Å –ø–æ–¥ —Ü–µ–ª—å: {profile.get('goal', '—É–ª—É—á—à–µ–Ω–∏–µ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏')}.

**–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:**
- –ò–º—è: {profile.get('name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}
- –í–æ–∑—Ä–∞—Å—Ç: {profile.get('age', 'N/A')}
- –†–æ—Å—Ç: {profile.get('height_cm', 'N/A')} —Å–º
- –í–µ—Å: {profile.get('initial_weight_kg', 'N/A')} –∫–≥
- –¶–µ–ª—å: {profile.get('goal', 'N/A')}
- –û–ø—ã—Ç: {profile.get('experience', 'N/A')}
- –†–µ–∫–æ—Ä–¥—ã: {profile.get('personal_bests', {}).get('records', 'N/A')}
- –û–±—ä–µ–º: {profile.get('weekly_volume_km', 'N/A')} –∫–º
- –ú–æ—Ç–∏–≤–∞—Ü–∏—è: {profile.get('motivation', 'N/A')}
- –î–µ–º–æ—Ç–∏–≤–∞—Ü–∏—è: {profile.get('demotivation', 'N/A')}
- –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {profile.get('infrastructure', 'N/A')}
- –î–æ–ø. –∏–Ω—Ñ–æ: {profile.get('additional_info', 'N/A')}
- –ú–∞–∫—Ä–æ—Ü–∏–∫–ª: {macrocycle_info}
"""
    return prompt.strip()

def format_detailed_plan_for_user(plan_data: dict) -> str:
    if "error" in plan_data:
        return f"–û—à–∏–±–∫–∞: {plan_data['error']}"
    
    output = f"_{plan_data.get('intro_summary', '–í–∞—à –ø–ª–∞–Ω:')}_\n\n"
    output += "### üèÉ‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n"
    for day in plan_data.get("training_plan", []):
        output += f"**{day['day_of_week']} ({day['date']})**\n"
        if day.get("morning_workout", {}).get("type") != "–û—Ç–¥—ã—Ö":
            output += f"- –£—Ç—Ä–æ: {day['morning_workout']['type']} - {day['morning_workout']['details']}\n"
        if day.get("evening_workout", {}).get("type") != "–û—Ç–¥—ã—Ö":
            output += f"- –í–µ—á–µ—Ä: {day['evening_workout']['type']} - {day['evening_workout']['details']}\n"
    
    output += "\n### üí™ –°–∏–ª–æ–≤—ã–µ/–°–ë–£\n"
    for block in plan_data.get("workout_details", []):
        output += f"**{block['block_name']} ({block['reps_and_sets']})**\n"
        for ex in block.get("exercises", []):
            output += f"- {ex['name']}: {ex['details']}\n"
    
    output += "\n### üçΩÔ∏è –ü–∏—Ç–∞–Ω–∏–µ\n"
    for day in plan_data.get("meal_plan", []):
        output += f"**{day['day_of_week']} (~{day['total_calories']} –∫–∫–∞–ª)**\n"
        for meal in day.get("meals", []):
            output += f"- {meal['meal_type']}: {meal['description']}\n"
    
    output += "\n### üõí –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫\n"
    for cat in plan_data.get("shopping_list", []):
        output += f"**{cat['category']}**\n"
        for item in cat.get("items", []):
            output += f"- {item}\n"
    
    output += "\n### ‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
    output += plan_data.get("general_recommendations", "–ù–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.")
    
    return output.strip()

# Handlers
dp = Dispatcher(storage=MemoryStorage())
dp.include_router(router)

@router.message(F.text == "/start")
async def command_start(message: Message, state: FSMContext):
    await state.clear()
    user_id = message.from_user.id
    user = await asyncio.to_thread(get_user_by_telegram_id, user_id)

    if user and user.get('status') == 'active':
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –•–æ—á–µ—à—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å?",
                             reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                 [InlineKeyboardButton(text="‚úçÔ∏è –û–±–Ω–æ–≤–∏—Ç—å", callback_data="edit_profile")],
                                 [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_action")]
                             ]))
    else:
        await asyncio.to_thread(insert_user, user_id, message.from_user.full_name)
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —Ç—Ä–µ–Ω–µ—Ä –ø–æ –±–µ–≥—É. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
        await state.set_state(OnboardingState.waiting_for_name)

@router.message(OnboardingState.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    name = message.text.strip()
    if not name or len(name) > 255:
        await message.answer("–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –ø—É—Å—Ç—ã–º –∏ –¥–æ 255 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ.")
        return
    await state.update_data(name=name)
    await message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?", reply_markup=get_back_keyboard("waiting_for_name"))
    await state.set_state(OnboardingState.waiting_for_age)

@router.message(OnboardingState.waiting_for_age)
async def process_age(message: Message, state: FSMContext):
    try:
        age = int(message.text)
        if age < 16 or age > 100:
            await message.answer("–í–æ–∑—Ä–∞—Å—Ç –æ—Ç 16 –¥–æ 100. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ.")
            return
        await state.update_data(age=age)
        await message.answer("–ö–∞–∫–æ–π —Ä–æ—Å—Ç (—Å–º)?", reply_markup=get_back_keyboard("waiting_for_name"))
        await state.set_state(OnboardingState.waiting_for_height)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

@router.message(OnboardingState.waiting_for_height)
async def process_height(message: Message, state: FSMContext):
    try:
        height = int(message.text)
        if height < 100 or height > 250:
            await message.answer("–†–æ—Å—Ç –æ—Ç 100 –¥–æ 250 —Å–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ.")
            return
        await state.update_data(height=height)
        await message.answer("–ö–∞–∫–æ–π –≤–µ—Å (–∫–≥)?", reply_markup=get_back_keyboard("waiting_for_age"))
        await state.set_state(OnboardingState.waiting_for_weight)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

@router.message(OnboardingState.waiting_for_weight)
async def process_weight(message: Message, state: FSMContext):
    try:
        weight = float(message.text)
        if weight < 30 or weight > 200:
            await message.answer("–í–µ—Å –æ—Ç 30 –¥–æ 200 –∫–≥. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ.")
            return
        await state.update_data(weight=weight)
        await message.answer("–ö–∞–∫–∞—è —Ü–µ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–±–µ–≥ 10–∫)?", reply_markup=get_back_keyboard("waiting_for_height"))
        await state.set_state(OnboardingState.waiting_for_goal)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

@router.message(OnboardingState.waiting_for_goal)
async def process_goal(message: Message, state: FSMContext):
    await state.update_data(goal=message.text.strip())
    await message.answer("–ß—Ç–æ –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç –≤ –±–µ–≥–µ?", reply_markup=get_back_keyboard("waiting_for_weight"))
    await state.set_state(OnboardingState.waiting_for_motivation)

@router.message(OnboardingState.waiting_for_motivation)
async def process_motivation(message: Message, state: FSMContext):
    await state.update_data(motivation=message.text.strip())
    await message.answer("–ß—Ç–æ –¥–µ–º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç?", reply_markup=get_back_keyboard("waiting_for_goal"))
    await state.set_state(OnboardingState.waiting_for_demotivation)

@router.message(OnboardingState.waiting_for_demotivation)
async def process_demotivation(message: Message, state: FSMContext):
    await state.update_data(demotivation=message.text.strip())
    await message.answer("–ö–∞–∫–æ–π –±–µ–≥–æ–≤–æ–π –æ–ø—ã—Ç?", reply_markup=get_back_keyboard("waiting_for_motivation"))
    await state.set_state(OnboardingState.waiting_for_experience)

@router.message(OnboardingState.waiting_for_experience)
async def process_experience(message: Message, state: FSMContext):
    await state.update_data(experience=message.text.strip())
    await message.answer("–õ–∏—á–Ω—ã–µ —Ä–µ–∫–æ—Ä–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5–∫ - 25:00)?", reply_markup=get_back_keyboard("waiting_for_demotivation"))
    await state.set_state(OnboardingState.waiting_for_personal_bests)

@router.message(OnboardingState.waiting_for_personal_bests)
async def process_personal_bests(message: Message, state: FSMContext):
    await state.update_data(personal_bests=message.text.strip())
    await message.answer("–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è?", reply_markup=get_back_keyboard("waiting_for_experience"))
    await state.set_state(OnboardingState.waiting_for_days_per_week)

@router.message(OnboardingState.waiting_for_days_per_week)
async def process_days_per_week(message: Message, state: FSMContext):
    try:
        days = int(message.text)
        if days < 1 or days > 7:
            await message.answer("–û—Ç 1 –¥–æ 7 –¥–Ω–µ–π. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ.")
            return
        await state.update_data(training_days_per_week=days)
        await message.answer("–ö–∞–∫–∏–µ –¥–Ω–∏ (–ø–Ω, —Å—Ä, –ø—Ç)?", reply_markup=get_back_keyboard("waiting_for_personal_bests"))
        await state.set_state(OnboardingState.waiting_for_preferred_days)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

@router.message(OnboardingState.waiting_for_preferred_days)
async def process_preferred_days(message: Message, state: FSMContext):
    days = [d.strip().lower() for d in message.text.split(',')]
    valid_days = {'–ø–Ω', '–≤—Ç', '—Å—Ä', '—á—Ç', '–ø—Ç', '—Å–±', '–≤—Å'}
    if not all(d in valid_days for d in days):
        await message.answer("–£–∫–∞–∂–∏ –¥–Ω–∏ (–ø–Ω, –≤—Ç, —Å—Ä...) —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.")
        return
    await state.update_data(preferred_days=message.text.strip())
    await message.answer("–°–∫–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –¥–µ–Ω—å?", reply_markup=get_back_keyboard("waiting_for_days_per_week"))
    await state.set_state(OnboardingState.waiting_for_trainings_per_day)

@router.message(OnboardingState.waiting_for_trainings_per_day)
async def process_trainings_per_day(message: Message, state: FSMContext):
    try:
        trainings = int(message.text)
        if trainings < 1 or trainings > 2:
            await message.answer("1 –∏–ª–∏ 2 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ.")
            return
        await state.update_data(trainings_per_day=trainings)
        await message.answer("–î–µ–Ω—å –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏?", reply_markup=get_back_keyboard("waiting_for_preferred_days"))
        await state.set_state(OnboardingState.waiting_for_long_run_day)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

@router.message(OnboardingState.waiting_for_long_run_day)
async def process_long_run_day(message: Message, state: FSMContext):
    day = message.text.strip().lower()
    valid_days = {'–ø–Ω', '–≤—Ç', '—Å—Ä', '—á—Ç', '–ø—Ç', '—Å–±', '–≤—Å'}
    if day not in valid_days:
        await message.answer("–£–∫–∞–∂–∏ –¥–µ–Ω—å (–ø–Ω, –≤—Ç...).")
        return
    await state.update_data(long_run_day=day)
    await message.answer("–¢–µ–∫—É—â–∏–µ —Ç—Ä–∞–≤–º—ã?", reply_markup=get_back_keyboard("waiting_for_trainings_per_day"))
    await state.set_state(OnboardingState.waiting_for_current_injuries)

@router.message(OnboardingState.waiting_for_current_injuries)
async def process_current_injuries(message: Message, state: FSMContext):
    await state.update_data(current_injuries=message.text.strip())
    await message.answer("–ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Ç—Ä–∞–≤–º—ã?", reply_markup=get_back_keyboard("waiting_for_long_run_day"))
    await state.set_state(OnboardingState.waiting_for_recurring_injuries)

@router.message(OnboardingState.waiting_for_recurring_injuries)
async def process_recurring_injuries(message: Message, state: FSMContext):
    await state.update_data(recurring_injuries=message.text.strip())
    await message.answer("–ö–∞–∫–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –µ—Å—Ç—å?", reply_markup=get_back_keyboard("waiting_for_current_injuries"))
    await state.set_state(OnboardingState.waiting_for_equipment)

@router.message(OnboardingState.waiting_for_equipment)
async def process_equipment(message: Message, state: FSMContext):
    await state.update_data(equipment=message.text.strip())
    await message.answer("–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ (—Å—Ç–∞–¥–∏–æ–Ω, –∑–∞–ª)?", reply_markup=get_back_keyboard("waiting_for_recurring_injuries"))
    await state.set_state(OnboardingState.waiting_for_infrastructure)

@router.message(OnboardingState.waiting_for_infrastructure)
async def process_infrastructure(message: Message, state: FSMContext):
    await state.update_data(infrastructure=message.text.strip())
    await message.answer("–ü–∏—â–µ–≤—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è?", reply_markup=get_back_keyboard("waiting_for_equipment"))
    await state.set_state(OnboardingState.waiting_for_dietary_restrictions)

@router.message(OnboardingState.waiting_for_dietary_restrictions)
async def process_dietary_restrictions(message: Message, state: FSMContext):
    await state.update_data(dietary_restrictions=message.text.strip())
    await message.answer("–ù–µ–¥–µ–ª—å–Ω—ã–π –æ–±—ä–µ–º (–∫–º)?", reply_markup=get_back_keyboard("waiting_for_infrastructure"))
    await state.set_state(OnboardingState.waiting_for_weekly_volume)

@router.message(OnboardingState.waiting_for_weekly_volume)
async def process_weekly_volume(message: Message, state: FSMContext):
    try:
        volume = int(message.text)
        if volume < 0 or volume > 200:
            await message.answer("–û–±—ä–µ–º –æ—Ç 0 –¥–æ 200 –∫–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ.")
            return
        await state.update_data(weekly_volume_km=volume)
        await message.answer("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è?", reply_markup=get_back_keyboard("waiting_for_dietary_restrictions"))
        await state.set_state(OnboardingState.waiting_for_additional_info)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

@router.message(OnboardingState.waiting_for_additional_info)
async def process_additional_info(message: Message, state: FSMContext):
    await state.update_data(additional_info=message.text.strip())
    user_data = await state.get_data()
    telegram_id = message.from_user.id
    await message.answer("–°–æ—Ö—Ä–∞–Ω—è—é –ø—Ä–æ—Ñ–∏–ª—å...")

    user = await asyncio.to_thread(get_user_by_telegram_id, telegram_id)
    if user:
        if await asyncio.to_thread(save_onboarding_data, user['id'], user_data):
            await message.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–ª–∞–Ω (–¥–æ 1 –º–∏–Ω)...")
            profile = await asyncio.to_thread(get_full_user_profile, user['id'])
            if profile:
                prompt = format_prompt_for_detailed_json(profile)
                plan = await generate_structured_plan_with_llm(prompt)
                if "error" not in plan:
                    await asyncio.to_thread(save_generated_plan, user['id'], datetime.now().strftime("%Y-%m-%d"), plan)
                    await message.answer(format_detailed_plan_for_user(plan), parse_mode=ParseMode.MARKDOWN, reply_markup=get_plan_feedback_keyboard())
                    await state.update_data(last_plan=plan)
                else:
                    await message.answer(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {plan['error']}")
            else:
                await message.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.")
        else:
            await message.answer("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.")
    await state.set_state(None)

@router.callback_query(F.data == "edit_profile")
async def restart_onboarding(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer("–û–±–Ω–æ–≤–∏–º –ø—Ä–æ—Ñ–∏–ª—å. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    await state.set_state(OnboardingState.waiting_for_name)
    await callback.answer()

@router.callback_query(F.data == "cancel_action")
async def cancel_action(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–û—Ç–º–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π /start.")
    await state.clear()
    await callback.answer()

@router.callback_query(F.data == "plan_confirm")
async def confirm_plan(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer("–û—Ç–ª–∏—á–Ω–æ! –£–¥–∞—á–Ω–æ–π –Ω–µ–¥–µ–ª–∏!")
    await state.clear()
    await callback.answer()

@router.callback_query(F.data == "plan_edit")
async def edit_plan_request(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer("–ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?")
    await state.set_state(EditingState.waiting_for_changes)
    await callback.answer()

@router.message(EditingState.waiting_for_changes)
async def process_plan_changes(message: Message, state: FSMContext):
    changes = message.text.strip()
    user_data = await state.get_data()
    last_plan = user_data.get("last_plan")
    
    await message.answer("–û–±–Ω–æ–≤–ª—è—é –ø–ª–∞–Ω (–¥–æ 1 –º–∏–Ω)...")
    if last_plan:
        prompt = f"–ò—Å—Ö–æ–¥–Ω—ã–π –ø–ª–∞–Ω: {json.dumps(last_plan, ensure_ascii=False)}\n–ò–∑–º–µ–Ω–µ–Ω–∏—è: {changes}\n–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø–æ–ª–Ω—ã–π –ø–ª–∞–Ω –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ JSON."
        new_plan = await generate_structured_plan_with_llm(prompt)
        if "error" not in new_plan:
            await asyncio.to_thread(save_generated_plan, message.from_user.id, datetime.now().strftime("%Y-%m-%d"), new_plan)
            await message.answer(format_detailed_plan_for_user(new_plan), parse_mode=ParseMode.MARKDOWN, reply_markup=get_plan_feedback_keyboard())
            await state.update_data(last_plan=new_plan)
        else:
            await message.answer(f"–û—à–∏–±–∫–∞: {new_plan['error']}")
    await state.set_state(None)

# Daily Notifications
async def send_daily_plan(bot: Bot, user_id: int, plan_data: dict):
    today = datetime.now().strftime("%A")
    today_plan = next((d for d in plan_data.get("training_plan", []) if d["day_of_week"].lower() == today.lower()), None)
    today_meal = next((d for d in plan_data.get("meal_plan", []) if d["day_of_week"].lower() == today.lower()), None)
    
    if today_plan or today_meal:
        message = f"üìÖ –ü–ª–∞–Ω –Ω–∞ {today}\n\n"
        if today_plan and today_plan.get("morning_workout", {}).get("type") != "–û—Ç–¥—ã—Ö":
            message += f"- –£—Ç—Ä–æ: {today_plan['morning_workout']['type']} - {today_plan['morning_workout']['details']}\n"
        if today_meal:
            message += f"\nüçΩÔ∏è –ü–∏—Ç–∞–Ω–∏–µ (~{today_meal['total_calories']} –∫–∫–∞–ª)\n"
            for meal in today_meal.get("meals", []):
                message += f"- {meal['meal_type']}: {meal['description']}\n"
        try:
            await bot.send_message(chat_id=user_id, text=message, parse_mode=ParseMode.MARKDOWN)
            logging.info(f"Sent daily plan to {user_id}")
        except Exception as e:
            logging.error(f"Failed to send to {user_id}: {e}")

async def schedule_daily_notifications(bot: Bot):
    scheduler = AsyncIOScheduler()
    scheduler.start()
    try:
        users = supabase.table('users').select('telegram_id, id').eq('status', 'active').execute().data
        for user in users:
            last_plan = supabase.table('training_plans').select('plan_details').eq('user_id', user['id']).order('created_at', desc=True).limit(1).execute().data
            if last_plan:
                scheduler.add_job(
                    send_daily_plan,
                    CronTrigger(hour=7, minute=0, timezone="Europe/Berlin"),  # 7:00 AM CET
                    args=[bot, user['telegram_id'], last_plan[0]['plan_details']]
                )
                logging.info(f"Scheduled for {user['telegram_id']}")
    except Exception as e:
        logging.error(f"Error scheduling notifications: {e}")

# ASGI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è uvicorn
async def set_main_menu(bot: Bot):
    commands = [
        BotCommand(command="start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"),
        BotCommand(command="help", description="–ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å")
    ]
    await bot.set_my_commands(commands)

async def on_startup(bot: Bot):
    logging.info("Starting bot...")
    await schedule_daily_notifications(bot)
    await set_main_menu(bot)
    await bot.set_webhook(url=WEBHOOK_URL)

async def on_shutdown(bot: Bot):
    logging.info("Shutting down bot...")
    await bot.delete_webhook()
    await bot.session.close()

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
dp.startup.register(on_startup)
dp.shutdown.register(on_shutdown)

# ASGI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è uvicorn
async def app(scope, receive, send):
    if scope["type"] == "http" or scope["type"] == "websocket":
        # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ webhook
        body = b""
        more_body = True
        while more_body:
            message = await receive()
            body += message.get("body", b"")
            more_body = message.get("more_body", False)

        # –ü–∞—Ä—Å–∏–Ω–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ Telegram
        try:
            update = Update(**json.loads(body.decode()))
            # –ü–µ—Ä–µ–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ Dispatcher
            await dp.feed_webhook_update(bot=bot, update=update)
        except Exception as e:
            logging.error(f"Error processing webhook update: {e}")
    else:
        await send({"type": "http.response.start", "status": 400, "headers": [[b"content-type", b"text/plain"]]})
        await send({"type": "http.response.body", "body": b"Unsupported request type"})

async def start_webhook():
    bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN))
    port = int(os.getenv("PORT", 8443))
    logging.info(f"Starting webhook on port {port} with URL {WEBHOOK_URL}")
    await on_startup(bot)
    config = uvicorn.Config(app=app, host="0.0.0.0", port=port, log_level="info")
    server = uvicorn.Server(config)
    await server.serve()
    await on_shutdown(bot)

if __name__ == "__main__":
    asyncio.run(start_webhook())